// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// templates/articleedit.html
// templates/general.html
// templates/header.html
// templates/loginform.html
// templates/menu.html
// templates/registrationform.html
package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesArticleeditHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x94\xcf\x8a\xe3\x38\x10\xc6\xef\x7e\x8a\x6a\xdd\x15\xf5\xde\x96\x45\x36\x2c\xdb\x39\xec\x61\xe9\x86\x34\x2c\x7b\x2c\x5b\x95\x58\xa0\x7f\x2b\x95\x93\x0e\xc1\xef\x3e\x58\x76\xd3\x9d\x81\x99\x61\xe6\xe4\xe8\xfb\xaa\x4a\xbf\x2a\x49\xd1\x0f\x4f\xcf\x7f\xbd\xfe\xf7\xb2\x87\x91\xbd\xeb\x1a\xbd\x7d\x1e\xa4\x84\x03\x11\x8c\xcc\xa9\xfc\xa1\x54\x21\x8f\x69\x8c\x99\x06\xbb\x1b\xa2\x57\x43\xf4\x7e\x0a\x96\xaf\x8a\x27\x8e\xd9\xa2\x2b\x8a\xa9\xb0\x34\xd9\x9e\x29\x48\x43\x67\x72\x31\x79\x0a\x2c\xe3\x51\x9e\xa2\xbc\x50\x2f\x31\x25\x67\x07\x64\x1b\x43\x91\x17\xcb\xa3\x3c\xd9\x00\x52\x76\x4d\xdd\x71\xef\x7b\x32\xc0\x23\xc1\x48\x68\x28\xef\x16\x18\x60\xf2\xc9\x21\x13\x20\x03\x8f\xb6\x80\x8b\x6b\x89\x25\xef\x76\xfb\xf0\xc5\xa7\x2c\x01\xbb\x79\x6e\x1a\xdd\x47\x73\xed\x1a\xd0\xa9\xd3\x08\x63\xa6\x63\x2b\x3c\x85\x49\x74\xff\x50\x98\xb4\xc2\x4e\xab\xb4\xfa\x7b\x63\x19\x30\xb3\x1d\x1c\x6d\xe2\x31\x66\x0f\x83\xc3\x52\x5a\xb1\xfc\x16\x80\xc3\xb2\x71\x2b\xd4\x16\x48\xc6\xf2\xe2\x94\xa9\xf7\x96\x05\x78\xe2\x31\x9a\x56\xbc\x3c\x1f\x5e\x45\xd7\x00\x68\x63\xcf\x9f\x4b\xc8\x53\x8e\x53\xaa\x16\x68\x87\x3d\x39\x38\xc6\xdc\x0a\x6b\x44\xf7\xf7\x93\x56\x55\x5a\x5d\x1b\xd2\xc4\xc0\xd7\x44\xad\x60\x7a\x63\x71\x57\x67\x88\x81\x73\x74\x02\xac\x69\x45\xa1\x50\xc8\x1a\x01\x01\x3d\x7d\x5a\x9e\xd1\x4d\xd4\x8a\xdb\x6d\xf7\xa7\xd9\x1d\x56\x75\x9e\x05\x64\x42\x13\x83\xbb\x56\x42\x65\xec\xf9\x67\x50\xd3\x98\xb1\x90\xe8\x5e\xea\xf7\x0e\x79\xc1\xc4\x4c\x08\x39\x5e\x4a\x2b\x7e\x7b\x14\x30\x44\x57\x5a\xf1\xfb\xe3\x77\xe8\xb7\x82\x1b\xfc\xb6\x5a\xea\x41\x72\x38\xd0\x18\x9d\xa1\xdc\x8a\xfd\x5b\xca\x54\x4a\xbd\x1f\xb5\x43\xb0\x01\x0c\x31\x5a\x07\x58\x00\x61\xcd\x5c\xd4\x1a\x82\x9e\xc0\x61\x38\x4d\x78\xa2\xb5\x0b\x58\x07\xb1\x82\xcf\x73\x95\xb4\x7a\x87\xfe\xa5\x61\x5c\x62\x36\xa2\xfb\x37\x66\xf3\x83\xb3\x5b\x9b\xab\xe1\xdf\x9e\x44\xb5\x9b\xaf\x1b\x7f\x1d\x09\x16\x07\x0c\x85\xc8\x36\x9c\x3e\x46\x50\x83\xef\x4e\x79\x41\x99\xe7\xaa\x67\xfa\x7f\xb2\x99\xcc\x7d\x63\xfd\xc4\x1c\xc3\xc6\xf6\x7e\x6f\x37\xa2\x9e\x03\xf4\x1c\x64\xca\xd6\x63\xbe\x8a\xee\x80\x67\xd2\x6a\x4d\x59\x5e\x84\x5a\x98\xbb\x46\xab\xf5\x5d\x35\x5a\xd5\xff\x8b\x2f\x01\x00\x00\xff\xff\xf5\x25\x5a\x8f\x46\x04\x00\x00")

func templatesArticleeditHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesArticleeditHtml,
		"templates/articleedit.html",
	)
}

func templatesArticleeditHtml() (*asset, error) {
	bytes, err := templatesArticleeditHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/articleedit.html", size: 1094, mode: os.FileMode(420), modTime: time.Unix(1553095969, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesGeneralHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xd0\x31\x4f\xc3\x30\x10\x05\xe0\x9d\x5f\x71\xcd\x7e\xf1\x8e\x4c\x16\xe8\x58\x81\x04\x0b\xe3\xa5\x39\x62\xb7\xb6\xcf\xb2\xaf\x41\x6d\x94\xff\x8e\x20\x2a\x45\xc2\x8b\x97\xef\xbd\x27\x9d\xdd\x3c\x3d\x3f\xbe\xbd\xbf\x6c\xc1\x69\x0c\xdd\x9d\x5d\x3f\x00\x00\xbb\x41\x84\x57\x66\x70\xaa\xb9\xde\x1b\xa3\xec\x92\x1c\x28\xb6\xb9\x88\xd9\x93\xf2\x28\xe5\x6c\x06\x9e\x38\x48\x8e\x9c\xd4\x14\xba\x14\xea\x45\x8f\x84\x9f\xdc\x63\x2e\x3e\xc8\xc5\x71\xf2\x07\xf4\x18\xfd\xb1\x48\xe5\x32\xf9\x2a\x13\x26\xc2\x51\x02\xa5\x11\x2b\x8e\x3e\xb5\xdf\xbb\x80\x78\x9b\xde\xc6\x9e\x07\x50\xc7\xe0\x98\x06\x2e\xab\x50\x8e\x39\x90\x32\x90\x82\x3a\x5f\x21\xc8\x9e\xd4\x4b\xba\x46\xe7\xf9\x66\x9a\x3f\xc9\x06\xda\x65\x59\xcb\x7b\x19\xce\x2b\xbe\x3e\x9b\x3b\x4b\xe0\x0a\x7f\x3c\x34\x26\x72\x3a\x35\xdd\x8e\xd3\xc9\x1a\xea\xac\xc9\xff\xec\x3c\x43\xbb\xe3\x5a\x69\xe4\x65\xf9\x05\xd6\xac\xc5\xd6\xfc\xdc\xf0\x2b\x00\x00\xff\xff\x5e\x67\xcf\x61\x5a\x01\x00\x00")

func templatesGeneralHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesGeneralHtml,
		"templates/general.html",
	)
}

func templatesGeneralHtml() (*asset, error) {
	bytes, err := templatesGeneralHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/general.html", size: 346, mode: os.FileMode(420), modTime: time.Unix(1553097264, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHeaderHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb2\xc9\x48\x4d\x4c\xb1\xe3\x52\xb0\xc9\x4d\x2d\x49\x54\x48\xce\x48\x2c\x2a\x4e\x2d\xb1\x55\x0a\x0d\x71\xd3\xb5\x50\x02\x89\x97\x64\x96\xe4\xa4\xda\x05\xa7\xe6\x26\xe6\x95\x64\x26\x2b\xa4\x64\x26\x97\x64\xe6\xe7\x25\x16\x55\xda\xe8\x43\xa4\xb8\x6c\xf4\x21\x66\x00\x02\x00\x00\xff\xff\x7a\x80\x5d\xb4\x4b\x00\x00\x00")

func templatesHeaderHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHeaderHtml,
		"templates/header.html",
	)
}

func templatesHeaderHtml() (*asset, error) {
	bytes, err := templatesHeaderHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/header.html", size: 75, mode: os.FileMode(420), modTime: time.Unix(1553090461, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesLoginformHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x53\xb1\x6e\xdb\x30\x10\xdd\xf5\x15\x17\xee\x34\xf7\x82\xe2\xd2\x66\x6b\x13\x03\xce\xd2\x91\x12\xcf\x12\x51\x92\xc7\x92\x27\xbb\x46\x90\x7f\x2f\x24\xab\x8e\x0c\xa4\x43\x26\x3d\xdd\xbd\x77\xf7\x0e\x7a\xd2\x0f\xdf\x9e\xbf\xbe\xfc\xdc\x3f\xc2\xc8\x31\x98\x46\xaf\x8f\x07\x29\xe1\x80\x08\x23\x73\xae\x5f\x94\xaa\x18\x6d\x1e\xa9\x60\xef\x77\x3d\x45\xd5\x53\x8c\x53\xf2\x7c\x51\x3c\x31\x15\x6f\x43\x55\x8c\x95\xa5\x2b\xfe\x84\x49\x3a\x3c\x61\xa0\x1c\x31\xb1\xa4\xa3\x1c\x48\x9e\xb1\x93\x36\xe7\xe0\x7b\xcb\x9e\x52\x95\x67\xcf\xa3\x1c\x7c\x02\x29\x4d\xb3\x6c\x7c\x8c\x1d\x3a\xe0\x11\x61\x44\xeb\xb0\xec\x66\x33\xc0\x18\x73\xb0\x8c\x60\x19\x78\xf4\x15\x02\x5d\x47\xcc\xba\xd7\xd7\xf7\xbe\xd8\xa8\x04\xec\xde\xde\x9a\x46\x77\xe4\x2e\xa6\x01\xd0\xd9\x68\x0b\x63\xc1\x63\x2b\x22\xa6\x49\x98\x1f\x98\x26\xad\xac\xd1\x2a\x2f\x84\x23\x95\x08\x7d\xb0\xb5\xb6\x62\xc6\x02\x6c\x3f\x6f\x69\x85\x0a\x34\xf8\x34\xd7\xea\xd4\x45\xcf\x02\x22\xf2\x48\xae\x15\xfb\xe7\xc3\x8b\x58\xd4\xce\x9f\xb6\x62\x39\x14\x9a\xf2\xd2\x02\x1d\x6c\x87\x01\x8e\x54\x5a\x91\x7c\xff\x2b\xd9\x88\xc2\x3c\xad\x48\xab\xa5\x7d\x65\xfa\x94\x27\x06\xbe\x64\x6c\x05\xe3\x1f\x16\x77\x33\x7b\x4a\x5c\x28\x08\xf0\x6e\x33\x09\x66\xe5\x8c\xb6\xb5\x1c\x6c\x8f\x23\x05\x87\xa5\x15\x4f\x77\xd4\x82\xbf\x27\x5f\xd0\x2d\xb6\x95\xf3\xa7\xcf\xf8\xcf\xb6\xd6\x33\x15\x27\xcc\x7e\x45\x1f\xf8\xbf\x9a\xb9\x51\xd7\x7b\xde\xdf\xff\x7b\xd3\x8d\x32\x0f\xbb\x3b\x61\xbf\xed\x7c\x7c\x41\x37\x31\x53\x5a\x97\xfd\xfb\x50\xeb\xaa\x8e\x13\x74\x9c\x64\x2e\x3e\xda\x72\x11\xe6\x3b\x0d\xe0\x93\x56\x57\x91\x69\x40\xab\xd9\xce\x0c\x36\x41\x51\x05\x07\x5f\xb9\x2c\x69\x5b\x32\x61\x0e\x7e\x48\x30\xe5\x5b\x70\xb4\xba\x26\xac\xd1\x6a\xf9\x73\xfe\x06\x00\x00\xff\xff\x37\xa2\xc8\x6c\x50\x03\x00\x00")

func templatesLoginformHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesLoginformHtml,
		"templates/loginform.html",
	)
}

func templatesLoginformHtml() (*asset, error) {
	bytes, err := templatesLoginformHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/loginform.html", size: 848, mode: os.FileMode(420), modTime: time.Unix(1553121626, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesMenuHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x92\xc1\x8a\x14\x31\x10\x86\xef\x3e\x45\x6d\xdf\xd3\xb9\x4b\xec\x8b\x0e\xba\xb0\xa0\xa0\x08\x1e\xd3\x9d\x9a\xa4\x76\x93\x54\x93\x54\xcf\xb0\xdb\xf4\xbb\xcb\x9a\x9e\x5d\x07\x45\xf0\x94\x40\xea\xff\xea\x4b\x52\xe6\xe6\xc3\xe7\xf7\xdf\x7e\x7c\x39\x40\x90\x14\x87\x37\xa6\x2d\x00\x00\xe6\x46\x29\xf8\x8a\x08\x41\x64\xae\x6f\xb5\x16\x0c\x99\xef\x6d\xea\xe7\xc2\x7a\xb2\x82\x9e\xcb\xa3\x76\x78\xc2\xc8\x73\xc2\x2c\xba\xd8\xa7\x62\x47\x96\x07\xab\xce\x38\xaa\xb9\x50\xe4\xa7\x80\x99\xee\x15\xa9\x44\x0f\x85\x2b\x96\x13\x55\x3e\xa9\x6c\x95\xe7\x68\xb3\x57\x55\x79\xca\xfd\x73\x5f\x50\xea\xb5\xf5\x21\x8d\xe8\x40\x02\x42\x40\xeb\xb0\xb4\x0a\xc1\x34\x47\x2b\x08\x56\x40\x02\x55\x88\x3c\x59\x21\xce\x97\xe8\xba\xbe\xd6\x74\xbf\x25\x3b\xe8\xb7\xad\xc1\x47\x76\x8f\xad\x18\xcc\xb2\x5f\x16\xc0\x44\x1a\x8c\x85\x50\xf0\xf8\xae\xd3\xb6\x08\x4d\x11\x4f\x84\x67\xdd\x3c\xbb\xe1\x3b\xe1\x19\xf6\x03\xa3\xed\x60\x74\xa4\x4b\x7a\x5d\xe9\x08\x99\x05\xfa\xdb\x7a\xc7\xde\xa3\xbb\xcd\xdb\x76\xcd\x8c\xec\x29\x1f\xb9\xa4\x6e\xb8\x7b\xde\xea\x82\x9e\xaa\x60\x79\x81\xad\x2b\x66\xb7\x6b\x36\xe4\x3f\x70\xbb\x09\x3a\x92\x17\xc5\x83\x23\xf9\x43\xf1\xbf\xa8\x91\x3d\x2f\xf2\xcb\x10\x78\x91\xbf\x43\xae\x22\x97\xf1\xf0\x24\x61\x19\xfb\x89\x93\x1e\x17\xe7\x30\xeb\x8a\xc9\xd1\x24\xdd\xf0\x91\xe4\xd3\x32\x5e\xbf\x99\xd1\xed\x1f\x8c\x6e\x23\xf7\x33\x00\x00\xff\xff\x10\x76\xa7\x11\x8a\x02\x00\x00")

func templatesMenuHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesMenuHtml,
		"templates/menu.html",
	)
}

func templatesMenuHtml() (*asset, error) {
	bytes, err := templatesMenuHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/menu.html", size: 650, mode: os.FileMode(420), modTime: time.Unix(1553097481, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesRegistrationformHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x94\x4d\x6f\xdb\x30\x0c\x86\xef\xfe\x15\xac\xee\xaa\xb0\x1e\x07\x59\x97\x2d\xc7\xb6\xc1\xda\xcb\x8e\xb2\xc5\xc4\xc2\xf4\x35\x89\x4e\x16\x14\xfd\xef\x83\xec\x04\x71\xd0\x74\x1f\xd8\x4e\x21\x44\xf2\xe5\xf3\x2a\xa2\xe5\xcd\xe7\xc7\x4f\xcf\x5f\xd7\x2b\x18\xc8\x3b\xd5\xc8\xe3\xcf\x0d\xe7\xf0\x84\x08\x03\x51\x2a\x1f\x85\x28\xe8\x75\x1a\x62\xc6\xde\xde\xf6\xd1\x8b\x3e\x7a\x3f\x06\x4b\x07\x41\x23\xc5\x6c\xb5\x2b\x82\xb0\x10\x37\xd9\xee\x30\x70\x83\x3b\x74\x31\x79\x0c\xc4\xe3\x86\x6f\x23\xdf\x63\xc7\x75\x4a\xce\xf6\x9a\x6c\x0c\x85\xef\x2d\x0d\x7c\x6b\x03\x70\xae\x9a\x69\xe2\xca\x77\x68\x80\x06\x84\x01\xb5\xc1\x7c\x5b\x61\x80\xd0\x27\xa7\x09\x41\x13\xd0\x60\x0b\xb8\x38\x4b\xd4\xbe\x97\x97\x73\x9e\x2d\xba\x18\xdc\xbe\xbe\x36\x8d\xec\xa2\x39\xa8\x06\x64\x52\x52\xc3\x90\x71\xd3\x32\x8f\x61\x64\xea\x1e\xc3\x28\x85\x56\x52\xa4\x9a\xdf\xc4\xec\xa1\x77\xba\x94\x96\xd5\x98\x81\xee\xeb\x8c\x96\x89\x8c\x5b\x5b\x28\x4f\x23\x6b\xaa\x8c\x9d\xb7\xc4\xc0\x23\x0d\xd1\xb4\x6c\xfd\xf8\xf4\xcc\x54\x03\x20\x8d\xdd\x2d\x35\xf8\x36\xc7\x31\x4d\x29\x90\x4e\x77\xe8\x60\x13\x73\xcb\x82\xed\xbf\x05\xed\x91\xa9\x87\x63\x24\xc5\x94\x9e\x2b\x6d\x48\x23\x01\x1d\x12\xb6\x8c\xf0\x07\xb1\x0b\xcd\x3e\x06\xca\xd1\x31\xb0\x66\xa1\x04\xb5\xb3\x46\xcb\xb3\xe4\x74\x8f\x43\x74\x06\x73\xcb\x1e\x2e\x4a\x33\x7e\x1f\x6d\x46\x33\x61\x0b\x63\x77\x7f\xc3\xbf\xbc\x10\xf4\xda\x3a\xa6\xbe\x2c\x8e\x60\xc5\xef\xb5\x75\xbf\xf1\x34\xc3\xbe\x95\x7a\xdf\xec\xdb\xda\x2a\x7d\x61\xf2\x0a\x06\xfb\x67\xbb\x49\x97\xb2\x8f\xd9\x7c\x60\x6a\x7d\x0c\x2f\xbc\xd5\x55\x99\x9d\x9d\x2a\xd9\xf4\xa4\xcf\xbe\x67\xaf\x67\x9d\xf7\x3d\x9e\x6b\xfe\x1b\xf6\x5d\xfd\x77\x2a\x1f\xa4\x6b\xf4\xd7\x08\xef\xfe\x80\xf0\xee\x17\x84\xdd\x48\x14\xc3\xf1\x52\x4e\xeb\x72\x54\xec\x28\x40\x47\x81\xa7\x6c\xbd\xce\x87\xd3\xd3\xc1\x2c\xc5\xdc\x56\xb7\x51\xd4\xb9\xaa\x91\x62\x5e\xdf\x46\x8a\xe9\xb3\xf4\x33\x00\x00\xff\xff\xf6\xa6\x8e\x8f\xad\x04\x00\x00")

func templatesRegistrationformHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesRegistrationformHtml,
		"templates/registrationform.html",
	)
}

func templatesRegistrationformHtml() (*asset, error) {
	bytes, err := templatesRegistrationformHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/registrationform.html", size: 1197, mode: os.FileMode(420), modTime: time.Unix(1553120492, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/articleedit.html":      templatesArticleeditHtml,
	"templates/general.html":          templatesGeneralHtml,
	"templates/header.html":           templatesHeaderHtml,
	"templates/loginform.html":        templatesLoginformHtml,
	"templates/menu.html":             templatesMenuHtml,
	"templates/registrationform.html": templatesRegistrationformHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"articleedit.html":      &bintree{templatesArticleeditHtml, map[string]*bintree{}},
		"general.html":          &bintree{templatesGeneralHtml, map[string]*bintree{}},
		"header.html":           &bintree{templatesHeaderHtml, map[string]*bintree{}},
		"loginform.html":        &bintree{templatesLoginformHtml, map[string]*bintree{}},
		"menu.html":             &bintree{templatesMenuHtml, map[string]*bintree{}},
		"registrationform.html": &bintree{templatesRegistrationformHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
